import React, { useEffect, useState } from "react";
import axios from "axios";
import Header from '../../components/Header';
import Aside from '../../components/Aside';

const Cms = () => {
    const [categoryList, setCategoryList] = useState([]);
    const [selectedCategoryId, setSelectedCategoryId] = useState("");
    const [styleInputs, setStyleInputs] = useState(
        Array.from({ length: 6 }, (_, i) => ({
            designId: i + 1,
            prompts: [],
            rawInput: ""
        }))
    );
    const [imageList, setImageList] = useState([])



    const groupedImages = Array.isArray(imageList)
        ? imageList.reduce((acc, cur) => {
            const { design_id } = cur;
            if (!acc[design_id]) acc[design_id] = [];
            acc[design_id].push(cur); // ‚úÖ Ï†ÑÏ≤¥ Í∞ùÏ≤¥ Ï†ÄÏû• (pathÎßå ÎßêÍ≥†)
            return acc;
        }, {})
        : {};



    const designIdMap = {
        1: "3DÍ∞êÏÑ±",
        2: "Ìè¨ÌÜ†Ïã§ÏÇ¨",
        3: "Ï∫êÎ¶≠ÌÑ∞/ÎßåÌôî",
        4: "Î†àÌä∏Î°ú",
        5: "AIÎ™®Îç∏",
        6: "ÏòàÏà†",
    };


    // useEffect ÎÇ¥Î∂Ä ÏàòÏ†ï: Í∞ÄÎÇòÎã§Ïàú Ï†ïÎ†¨
    useEffect(() => {
        const fetchCategories = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_FASTAPI_ADS_URL}/ads/get/category`);
                const sorted = (response.data.category_list || []).sort((a, b) => a.name.localeCompare(b.name, 'ko'));
                setCategoryList(sorted);
            } catch (error) {
                console.error("Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
            }
        };
        fetchCategories();
    }, []);

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Í∞íÏóê Îî∞Î•∏ Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞
    useEffect(() => {
        if (!selectedCategoryId) return;

        const fetchImageList = async () => {
            try {
                const response = await axios.post(
                    `${process.env.REACT_APP_FASTAPI_ADS_URL}/ads/get/image/list`,
                    { categoryId: selectedCategoryId }
                );
                setImageList(response.data.image_list || []);  // fallback
            } catch (error) {
                console.error("Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
                setImageList([]); // ‚úÖ Ïã§Ìå®Ìï¥ÎèÑ ÎπÑÏõåÏ§å
            }
        };

        fetchImageList();
    }, [selectedCategoryId]);




    // ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†• Ï≤òÎ¶¨
    const handlePromptChange = (idx, value) => {
        const updated = [...styleInputs];
        updated[idx].rawInput = value;
        // ÏàòÏ†ïÎêú ÏΩîÎìú (ÏÑ∏ÎØ∏ÏΩúÎ°† Í∏∞Ï§Ä Î∂ÑÎ¶¨)
        updated[idx].prompts = value
            .split(";")
            .map(p => p.trim())
            .filter(p => p.length > 0);
        setStyleInputs(updated);
    };

    // Îì±Î°ù
    const handleSubmit = async () => {
        if (!selectedCategoryId) {
            alert("ÏÜåÎ∂ÑÎ•òÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        const payload = {
            categoryId: parseInt(selectedCategoryId, 10),
            styles: styleInputs.map(({ designId, prompts }) => ({
                designId,
                prompts
            }))
        };

        try {
            await axios.post(`${process.env.REACT_APP_FASTAPI_BASE_URL}/cms/thumbnail/insert`, payload);
            alert("Îì±Î°ù ÏôÑÎ£å");

            // ‚úÖ ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†•Í∞í Ï¥àÍ∏∞Ìôî
            setStyleInputs(
                Array.from({ length: 6 }, (_, i) => ({
                    designId: i + 1,
                    prompts: [],
                    rawInput: ""
                }))
            );
        } catch (err) {
            console.error("Îì±Î°ù Ïã§Ìå®:", err);
            alert("Îì±Î°ù Ïã§Ìå®");
        }
    };


    return (
        <div>
            <Header />
            <div className="flex">
                <Aside />
                <main className="flex-1 flex flex-col gap-2 min-h-screen p-4">

                    <div className="flex justify-between items-center pb-6">
                        <h2 className="text-2xl font-bold">Ïç∏ÎÑ§Ïùº ÏûëÏóÖ</h2>
                        <button onClick={handleSubmit} className="text-2xl font-bold border px-3 py-2">
                            Ïç∏ÎÑ§Ïùº Îì±Î°ù
                        </button>
                    </div>

                    {/* paddingÏúºÎ°ú Î≥ÄÍ≤Ω */}
                    <div className="pb-6">
                        <label className="block pb-2 text-lg font-semibold">ÏÜåÎ∂ÑÎ•ò ÏÑ†ÌÉù</label>
                        <select
                            value={selectedCategoryId}
                            onChange={(e) => setSelectedCategoryId(e.target.value)}
                            className="w-full border px-4 py-2"
                        >
                            <option value="">-- ÏÜåÎ∂ÑÎ•ò ÏÑ†ÌÉù --</option>
                            {categoryList.map((cat) => (
                                <option key={cat.id} value={cat.id}>
                                    {cat.name} Ïùò id Í∞í : {cat.id}
                                </option>
                            ))}
                        </select>
                    </div>

                    {selectedCategoryId && (
                        imageList.length === 0 ? (
                            // üî§ ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†•Ï∞Ω (Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞)
                            <div className="space-y-4">
                                {styleInputs.map((style, idx) => (
                                    <div key={idx}>
                                        <label className="block font-semibold pb-1">Ïä§ÌÉÄÏùº {style.designId}</label>
                                        <textarea
                                            rows={3}
                                            className="w-full border px-2 py-1 resize-none"
                                            placeholder="ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†• (ÏÑ∏ÎØ∏ÏΩúÎ°† ; ÏúºÎ°ú Íµ¨Î∂Ñ)"
                                            value={style.rawInput}
                                            onChange={(e) => handlePromptChange(idx, e.target.value)}
                                        />
                                    </div>
                                ))}
                            </div>
                        ) : (
                            // üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ (Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï°¥Ïû¨Ìï† Í≤ΩÏö∞)
                            <div className="space-y-6">
                                {Object.entries(groupedImages).map(([designId, images]) => (
                                    <div key={designId}>
                                        <h3 className="font-semibold text-lg pb-2">
                                            {designIdMap[designId] || `ÎîîÏûêÏù∏ ${designId}`}
                                        </h3>
                                        <div className="flex flex-wrap gap-4">
                                            {images.map((img, idx) => (
                                                <div key={idx} className="w-32">
                                                    <img
                                                        src={img.image_path}
                                                        alt={`ÎîîÏûêÏù∏ ${designId} Ïù¥ÎØ∏ÏßÄ`}
                                                        className="w-32 h-32 object-cover border rounded"
                                                    />
                                                    <div className="relative group">
                                                        <p
                                                            className="text-xs text-gray-500 pt-1 truncate w-full overflow-hidden whitespace-nowrap"
                                                        >
                                                            {img.prompt || "(ÌîÑÎ°¨ÌîÑÌä∏ ÏóÜÏùå)"}
                                                        </p>
                                                        {img.prompt && (
                                                            <div className="absolute z-10 hidden group-hover:block border-2 bg-white text-black text-s p-2 rounded shadow-lg w-64 top-full mt-1">
                                                                {img.prompt}
                                                            </div>
                                                        )}
                                                    </div>

                                                </div>
                                            ))}

                                        </div>
                                    </div>
                                ))}
                            </div>
                        )
                    )}

                </main>
            </div>
        </div>
    );
};

export default Cms;
